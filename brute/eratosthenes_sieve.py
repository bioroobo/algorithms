comment = """ Из википедии:
        Для нахождения всех простых чисел не больше заданного числа n, следуя методу Эратосфена,
        нужно выполнить следующие шаги:
          1. Выписать подряд все целые числа от двух до n (2, 3, 4, …, n).
          2. Пусть переменная p изначально равна двум — первому простому числу.
          3. Зачеркнуть в списке числа от 2p до n считая шагами по p (это будут числа кратные p:
             2p, 3p, 4p, …).
          4. Найти первое незачёркнутое число в списке, большее чем p, и присвоить значению
             переменной p это число.
          5. Повторять шаги 3 и 4, пока возможно.

        Теперь все незачёркнутые числа в списке — это все простые числа от 2 до n.

        На практике, алгоритм можно улучшить следующим образом. На шаге № 3 числа можно
        зачеркивать начиная сразу с числа p**2 (p в квадрате), потому что все меньшие числа,
        кратные p, обязательно имеют простой делитель меньше p, а они уже зачеркнуты к этому
        времени. И, соответственно, останавливать алгоритм можно, когда p**2 станет больше, чем n.
        Также, все простые числа (кроме 2) — нечётные числа, и поэтому для них можно считать
        шагами по 2p, начиная с p**2.


    Пример для n = 30

    Запишем натуральные числа, начиная от 2, до 30 в ряд:
    2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30

    Первое число в списке, 2 — простое. Пройдём по ряду чисел, зачёркивая все числа, кратные 2
    (то есть, каждое второе, начиная с 2**2 = 4):
    2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30

    Следующее незачеркнутое число, 3 — простое. Пройдём по ряду чисел, зачёркивая все числа,
    кратные 3 (то есть, каждое третье, начиная с 3**2 = 9):
    2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30

    Следующее незачеркнутое число, 5 — простое. Пройдём по ряду чисел, зачёркивая все числа,
    кратные 5 (то есть, каждое пятое, начиная с 5**2 = 25):
    2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30

    Следующее незачеркнутое число — 7. Его квадрат, 49 — больше 30, поэтому на этом работа
    завершена. Все составные числа уже зачеркнуты:
    2  3     5     7           11    13          17    19          23                29


        Оптимизированная реализация (начинающаяся с квадратов) на псевдокоде:

        Вход: натуральное число n
        Выход: все простые числа от 2 до n.

        Пусть A — булевый массив, индексируемый числами от 2 до n, 
        изначально заполненный значениями true.

        для i := 2, 3, 4, ..., пока i**2 <= n:
          если A[i] = true:
            для j := i**2, i**2 + i, i**2 + 2i, ..., пока j <= n:
              назначить A[j] := false
        возвращаем: все числа i, для которых A[i] = true.
    """

def eratosthenes_sieve(n:int):
    """ Решето Эратосфена — алгоритм нахождения всех простых чисел до некоторого целого числа n,
        который приписывают древнегреческому математику Эратосфену Киренскому.
        Как и во многих случаях, здесь название алгоритма говорит о принципе его работы,
        то есть решето подразумевает фильтрацию, в данном случае фильтрацию всех чисел за
        исключением простых. По мере прохождения списка нужные числа остаются, а ненужные
        (они называются составными) исключаются.
    """

    A = [True] * n
    A[0] = A[1] = False
    for i in range(2, n):
        if A[i]:
            for j in range(i**2, n, i):  # помечаем False все числа кратные i: вначале 2, потом 3, потом 5 и т.д
                A[j] = False            
    res = ''
    for i in range(n):
        #print(i, '-', 'простое' if A[i] else 'составное')
        if A[i]: res += (' ' + str(i))
    return res

def test_eratosthenes_sieve():
    r = eratosthenes_sieve(30)
    if r == ' 2 3 5 7 11 13 17 19 23 29':
        print('#test1 - OK')
    else:
        print('#test1 - FAILURE')


#=================================================
test_eratosthenes_sieve()


